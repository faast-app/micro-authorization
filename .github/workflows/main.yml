name: Build, Test, and Publish

on:
  push:
    branches: 
    - faast/desa
    - faast/stage
    - faast/preProd
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '7.0.x'

      - name: Restore dependencies
        run: dotnet restore ApiAuth/ApiAuth.csproj

      - name: Publish
        run: dotnet publish ApiAuth/ApiAuth.csproj -c Release -o bin

      - name: Package build output
        run: |
          mkdir -p packaged
          tar -czvf packaged/package.tar.gz -C bin .

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: packaged
          path: packaged/package.tar.gz

  publish-client:
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download packaged artifact
        uses: actions/download-artifact@v4
        with:
          name: packaged
          path: packaged

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y git

      - name: Unpack artifact
        run: |
          rm -rf production
          mkdir -p upload
          tar -xf packaged/package.tar.gz -C upload

      - name: Configure git
        run: |
          git config --global user.email "${{ env.DEPLOY_EMAIL_AUTH }}"
          git config --global user.name "${{ env.DEPLOY_USER_AUTH }}"

      - name: Initialize and push to client repo
        env:
            URL_REPOSITORY_DEPLOY: "https://Guido.Matos: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@github.com/faast-app/deploy-micro-authorization.git"
            GH_TOKEN: ${{ secrets.GH_TOKEN }}
            DEPLOY_REPOSITORY_NAME: ${{ env.DEPLOY_REPOSITORY_NAME }}
        run: |
          cd upload
          git init
          echo "URL_REPOSITORY_DEPLOY: $URL_REPOSITORY_DEPLOY"
          git remote add deploy "$URL_REPOSITORY_DEPLOY"
          git ls-remote deploy || { echo "Remote authentication failed"; exit 128; }
          git add .
          VERSION_REPO_CLIENTE=$(cat ../version.txt)
          echo "VERSION_REPO_CLIENTE: $VERSION_REPO_CLIENTE"
          git commit --allow-empty -m "Solicitando Pase ${VERSION_REPO_CLIENTE}"
          git checkout -b "$VERSION_REPO_CLIENTE"
          git push deploy "$VERSION_REPO_CLIENTE"
